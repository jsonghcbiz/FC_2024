import streamlit as st
import plotly.express as px
from st_aggrid import AgGrid, GridOptionsBuilder

from senti_classifier_kobert import predict_sentiment
from cgv_crawler import CGVTitleCrawler, CGVDetailCrawler
from megabox_crawler import MegaboxTitleCrawler, MegaboxDetailCrawler
from nav import inject_custom_navbar
from image_generator import ImageGenerator

# from review_crawling import (  # Import your predefined crawling functions
#     get_movie_reviews_on_cgv,
#     get_movie_reviews_on_megabox,
#     CGV_URL,
#     MEGABOX_URL,
#     CGV_MOVIE_CODES,
#     MEGABOX_MOVIE_CODES,
# )


# Page configuration
st.set_page_config(
    page_title="ÏòÅÌôî Î¶¨Î∑∞ ÌÅ¨Î°§ÎßÅ Î∞è Í∞êÏÑ± Î∂ÑÏÑù",
    layout="wide",
    initial_sidebar_state="collapsed",
)

inject_custom_navbar()

# Custom CSS for styling
st.markdown(
    """
    <style>
        /* General page styling */
        html, body, [data-testid="stAppViewContainer"] {
            background-color: #1C1C1E;
            color: #F0F0F0;
            font-family: 'Arial', sans-serif;
        }

        h1 {
            color: #FF416C;
            text-align: center;
            font-size: 36px;
            margin-bottom: 10px;
        }

        h2 {
            color: #FFFFFF;
            font-size: 28px;
            margin-top: 20px;
        }

        .stButton > button {
            background: linear-gradient(90deg, #FF416C, #FF4B2B);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease-in-out;
            box-shadow: 0 4px 10px rgba(255, 65, 108, 0.3);
        }

        .stButton > button:hover {
            background: linear-gradient(90deg, #FF4B2B, #FF416C);
            transform: scale(1.05);
        }

        .metric-box {
            background-color: #2C2C2E;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
        }

        .section-header {
            color: #28A745;
            font-size: 24px;
            margin-top: 30px;
        }
    </style>
    """,
    unsafe_allow_html=True,
)

# Page Title
st.title("üé• ÏòÅÌôî Î¶¨Î∑∞ ÌÅ¨Î°§ÎßÅ Î∞è Í∞êÏÑ± Î∂ÑÏÑù")
st.write("Ïù¥ ÌéòÏù¥ÏßÄÎäî ÏòÅÌôî Î¶¨Î∑∞Î•º ÌÅ¨Î°§ÎßÅÌïòÍ≥† Í∞êÏÑ± Î∂ÑÏÑùÏùÑ ÏàòÌñâÌïòÎäî ÌéòÏù¥ÏßÄÏûÖÎãàÎã§!")

def analyze_sentiment(reviews_df, model_path="kobert_konply"):
    try: 
        reviews_df["sentiment_analysis"] = reviews_df["review"].apply(
            lambda x: predict_sentiment(x, model_path)
        )
        reviews_df["sentiment"] = reviews_df["sentiment_analysis"].apply(lambda x: x["sentiment"])
        reviews_df["confidence"] = reviews_df["sentiment_analysis"].apply(lambda x: x["confidence"])
    except Exception as e:
        st.error(f"Í∞êÏÑ± Î∂ÑÏÑù Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
    return reviews_df


if 'cgv_reviews' not in st.session_state:
    st.session_state['cgv_reviews'] = None
if 'megabox_reviews' not in st.session_state:
    st.session_state['megabox_reviews'] = None

# ÏòÅÌôî Ï†úÎ™© ÏÑ†ÌÉù ÏÑ∏ÏÖò ÏÉÅÌÉú Î≥ÄÏàò
if 'cgv_movie_titles' not in st.session_state:
    st.session_state.cgv_movie_titles = []
if 'megabox_movie_titles' not in st.session_state:
    st.session_state.megabox_movie_titles = []

if 'selected_movie' not in st.session_state:
    st.session_state.selected_movie = None
if "show_megabox_sentiment" not in st.session_state:
    st.session_state.show_megabox_sentiment = False
if "show_cgv_sentiment" not in st.session_state:
    st.session_state.show_cgv_sentiment = False


def generate_cgv_prompt(reviews_df, cgv_movie_data):
    # Í∞êÏÑ± Î∂ÑÏÑù Í≤∞Í≥º Í∞ÄÏ†∏Ïò§Í∏∞
    if 'sentiment' in reviews_df.columns:
        positive_reviews = reviews_df[reviews_df['sentiment'] == 'Í∏çÏ†ï']['review'].tolist()
        negative_reviews = reviews_df[reviews_df['sentiment'] == 'Î∂ÄÏ†ï']['review'].tolist()
    else:
        st.warning("Í∞êÏÑ± Î∂ÑÏÑùÏùÑ Î®ºÏ†Ä Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî.")
        return None

    # ÏòÅÌôî Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    title = cgv_movie_data.get('Title', '')
    director = cgv_movie_data.get('Directors', '')
    cast = cgv_movie_data.get('Cast', '')
    plot = cgv_movie_data.get('Plot', '')

    # Í∏çÏ†ïÏ†Å, Î∂ÄÏ†ïÏ†Å Í∞êÏÑ± Î™®ÏúºÍ∏∞
    positive_summary = ' '.join(positive_reviews[:3]) if positive_reviews else ''
    negative_summary = ' '.join(negative_reviews[:3]) if negative_reviews else ''

    # Í∞êÏÑ± ÎπÑÏú® Í≥ÑÏÇ∞
    total_reviews = len(reviews_df)
    positive_ratio = len(positive_reviews) / total_reviews if total_reviews > 0 else 0

    # Ï†ÑÏ≤¥ Î∂ÑÏúÑÍ∏∞ Í≤∞Ï†ï
    if positive_ratio >= 0.7:
        tone = "Î∞ùÍ≥† Ìù¨ÎßùÏ†ÅÏù∏"
    elif positive_ratio <= 0.3:
        tone = "Ïñ¥Îë°Í≥† Í∏¥Ïû•Í∞ê ÏûàÎäî"
    else:
        tone = "ÎåÄÎπÑÎêòÎäî Î™ÖÏïîÏù¥ Í∞ïÌïú"

    # ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
    cgv_prompt = f"""
ÏòÅÌôî Ï†ïÎ≥¥Î•º Ïù¥Ïö©Ìïú ÏòàÏà† ÏûëÌíà ÏÉùÏÑ±:

{title}
ÌÜ§Ïï§Îß§ÎÑà: {tone} Î∂ÑÏúÑÍ∏∞Ïùò ÏòÅÌôî Ìè¨Ïä§ÌÑ∞

ÌïµÏã¨ ÏöîÏÜå:
- {plot}
- {cast}
- fiezeÏóêÏÑú ÌåêÎß§Ìï† ÏàòÏ§ÄÏùò ÏûëÌíà 

ÏãúÍ∞ÅÏ†Å Ïä§ÌÉÄÏùº:
- ÏàòÏ±ÑÌôî ÎäêÎÇåÏùò Î™®ÎçòÌïú ÏïÑÌä∏ÏõåÌÅ¨
- ÏÑ†Î™ÖÌïú Ïù¥ÎØ∏ÏßÄÏôÄ ÍπîÎÅîÌïú Íµ¨ÎèÑ
- ÌÖçÏä§Ìä∏ÎÇò Í∏ÄÏûê Ï†úÏô∏
- ÏòÅÌôîÏùò ÌïµÏã¨ Ïû•Î©¥Ïù¥ÎÇò Í∞êÏ†ïÏùÑ ÏÉÅÏßïÏ†ÅÏúºÎ°ú ÌëúÌòÑ
- Î¶¨Î∑∞Ïùò Í∏çÏ†ïÏ†Å ÏöîÏÜåÏôÄ Î∂ÄÏ†ïÏ†Å ÏöîÏÜåÎ•º Î∞òÏòÅÌïú ÌÜ§ ÏÑ§Ï†ï

Í¥ÄÍ∞ù Î∞òÏùë Î∞òÏòÅ:
Í∏çÏ†ïÏ†Å ÏöîÏÜå: {positive_summary[:500]}...
Î∂ÄÏ†ïÏ†Å ÏöîÏÜå: {negative_summary[:500]}...

Ï∂îÍ∞Ä ÏßÄÏπ®:
- fiezeÏóêÏÑú ÌåêÎß§Ìï† ÏàòÏ§ÄÏùò ÏûëÌíà  
- Ï†ÑÎ¨∏Ï†ÅÏù∏ ÏòÅÌôî Ìè¨Ïä§ÌÑ∞ Ïä§ÌÉÄÏùº Ïú†ÏßÄ
- Í≥†ÌíàÏßà Î†åÎçîÎßÅ
- Í∞êÏÑ± Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä {positive_ratio:.0%} Í∏çÏ†ïÏ†ÅÏûÑÏùÑ Í≥†Î†§Ìïú ÌÜ§ ÏÑ§Ï†ï
"""

    return cgv_prompt


def generate_megabox_prompt(reviews_df, megabox_movie_data):
    # Í∞êÏÑ± Î∂ÑÏÑù Í≤∞Í≥º Í∞ÄÏ†∏Ïò§Í∏∞
    if 'sentiment' in reviews_df.columns:
        positive_reviews = reviews_df[reviews_df['sentiment'] == 'Í∏çÏ†ï']['review'].tolist()
        negative_reviews = reviews_df[reviews_df['sentiment'] == 'Î∂ÄÏ†ï']['review'].tolist()
    else:
        st.warning("Í∞êÏÑ± Î∂ÑÏÑùÏùÑ Î®ºÏ†Ä Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî.")
        return None

    # ÏòÅÌôî Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    title = megabox_movie_data.get('Title', '')
    director = megabox_movie_data.get('Directors', '')
    casts = megabox_movie_data.get('Casts', '')
    plot = megabox_movie_data.get('Plot', '')

    # Í∏çÏ†ïÏ†Å, Î∂ÄÏ†ïÏ†Å Í∞êÏÑ± Î™®ÏúºÍ∏∞
    positive_summary = ' '.join(positive_reviews[:3]) if positive_reviews else ''
    negative_summary = ' '.join(negative_reviews[:3]) if negative_reviews else ''

    # Í∞êÏÑ± ÎπÑÏú® Í≥ÑÏÇ∞
    total_reviews = len(reviews_df)
    positive_ratio = len(positive_reviews) / total_reviews if total_reviews > 0 else 0

    # Ï†ÑÏ≤¥ Î∂ÑÏúÑÍ∏∞ Í≤∞Ï†ï
    if positive_ratio >= 0.7:
        tone = "Î∞ùÍ≥† Ìù¨ÎßùÏ†ÅÏù∏"
    elif positive_ratio <= 0.3:
        tone = "Ïñ¥Îë°Í≥† Í∏¥Ïû•Í∞ê ÏûàÎäî"
    else:
        tone = "ÎåÄÎπÑÎêòÎäî Î™ÖÏïîÏù¥ Í∞ïÌïú"

    # ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
    megabox_prompt = f"""
ÏòÅÌôî Ìè¨Ïä§ÌÑ∞ ÏÉùÏÑ±ÏùÑ ÏúÑÌïú ÌîÑÎ°¨ÌîÑÌä∏:

{title}
ÌÜ§Ïï§Îß§ÎÑà: {tone} Î∂ÑÏúÑÍ∏∞Ïùò ÏòÅÌôî Ìè¨Ïä§ÌÑ∞

ÌïµÏã¨ ÏöîÏÜå:
- {plot}
- {casts}

ÏãúÍ∞ÅÏ†Å Ïä§ÌÉÄÏùº:
- ÏàòÏ±ÑÌôî ÎäêÎÇåÏùò Î™®ÎçòÌïú ÏïÑÌä∏ÏõåÌÅ¨
- ÏÑ†Î™ÖÌïú Ïù¥ÎØ∏ÏßÄÏôÄ ÍπîÎÅîÌïú Íµ¨ÎèÑ
- ÌÖçÏä§Ìä∏ÎÇò Í∏ÄÏûê Ï†úÏô∏
- ÏòÅÌôîÏùò ÌïµÏã¨ Ïû•Î©¥Ïù¥ÎÇò Í∞êÏ†ïÏùÑ ÏÉÅÏßïÏ†ÅÏúºÎ°ú ÌëúÌòÑ
- Î¶¨Î∑∞Ïùò Í∏çÏ†ïÏ†Å ÏöîÏÜåÏôÄ Î∂ÄÏ†ïÏ†Å ÏöîÏÜåÎ•º Î∞òÏòÅÌïú ÌÜ§ ÏÑ§Ï†ï

Í¥ÄÍ∞ù Î∞òÏùë Î∞òÏòÅ:
Í∏çÏ†ïÏ†Å ÏöîÏÜå: {positive_summary[:500]}...
Î∂ÄÏ†ïÏ†Å ÏöîÏÜå: {negative_summary[:500]}...

Ï∂îÍ∞Ä ÏßÄÏπ®:
- Ï†ÑÎ¨∏Ï†ÅÏù∏ ÏòÅÌôî Ìè¨Ïä§ÌÑ∞ Ïä§ÌÉÄÏùº Ïú†ÏßÄ
- Í≥†ÌíàÏßà Î†åÎçîÎßÅ
- Í∞êÏÑ± Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä {positive_ratio:.0%} Í∏çÏ†ïÏ†ÅÏûÑÏùÑ Í≥†Î†§Ìïú ÌÜ§ ÏÑ§Ï†ï
"""

    return megabox_prompt

if 'cgv_movie_titles' not in st.session_state:
    st.session_state.cgv_movie_titles = []
if 'megabox_movie_titles' not in st.session_state:
    st.session_state.megabox_movie_titles = []

if 'cgv_selected_movie' not in st.session_state:
    st.session_state.cgv_selected_movie = None
if 'megabox_selected_movie' not in st.session_state:
    st.session_state.megabox_selected_movie = None


if "cgv_movie_info" not in st.session_state:
    st.session_state.cgv_movie_info = []
if "megabox_movie_info" not in st.session_state:
    st.session_state.megabox_movie_info = []

if 'cgv_reviews' not in st.session_state:
    st.session_state['cgv_reviews'] = None
if 'megabox_reviews' not in st.session_state:
    st.session_state['megabox_reviews'] = None

if "show_megabox_sentiment" not in st.session_state:
    st.session_state.show_megabox_sentiment = False
if "show_cgv_sentiment" not in st.session_state:
    st.session_state.show_cgv_sentiment = False



def streamlit_movie_search():
    st.markdown("---")
    st.header("üîç CGV Î¶¨Î∑∞ ÌÅ¨Î°§ÎßÅ")

    with st.expander("CGV Î¶¨Î∑∞ ÌÅ¨Î°§ÎßÅ", expanded=False):
        cgv_search_query = st.text_input("Í≤ÄÏÉâÌï† ÏòÅÌôî Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:", key="cgv_search_query")
        if st.button("CGV Í≤ÄÏÉâ", key="movie_search"):
            if cgv_search_query:
                with st.spinner('CGV Í≤ÄÏÉâÏ§ë...'):
                    cgv = CGVTitleCrawler()
                    cgv_movie_titles, cgv_movie_info = cgv.fetch_movie_titles(cgv_search_query)
                    if cgv_movie_titles:
                        st.session_state.cgv_movie_titles = cgv_movie_titles
                        st.session_state.cgv_movie_info = cgv_movie_info
                        st.session_state.selected_movie = cgv_movie_titles
                    else:
                        st.warning("CGVÏóêÏÑú ÏòÅÌôîÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
            else:
                st.warning("ÏòÅÌôî Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
    
        if st.session_state.cgv_movie_titles:
            st.session_state.cgv_selected_movie = st.selectbox(
                "CGV Í≤ÄÏÉâ Í≤∞Í≥º:", 
                st.session_state.cgv_movie_titles,
                key="cgv_movie_selectbox",
                format_func=lambda x: f"{x}".replace("()", "")
                # format_func=lambda x: f"{x}".replace("()", "")
            )
        if st.session_state.get("cgv_selected_movie"):
            st.session_state.selected_movie = st.session_state.cgv_selected_movie
            cgv_review_limit = st.number_input("ÌÅ¨Î°§ÎßÅÌï† CGV Î¶¨Î∑∞ Ïàò", min_value=1, value=5, key="cgv_review_limit")
            if st.button("ÏòÅÌôî Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞", key="cgv_info_button"):
                with st.spinner("ÏòÅÌôî Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Îäî Ï§ë... Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî."):
                    # selected_movie_title = st.session_state.cgv_selected_movie
                    # selected_movie_info = next(
                    #     (info for info in st.session_state.cgv_movie_info if info["title"].replace("(all)", "").strip() == selected_movie_title), None
                    # )

                    # if not selected_movie_info:
                    #     st.warning("ÏÑ†ÌÉùÌïú ÏòÅÌôî Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                    #     return

                    cgv_detail = CGVDetailCrawler()
                    cgv_movie_data = cgv_detail.crawl_movie_details(st.session_state.selected_movie, review_limit=cgv_review_limit)
                    if cgv_movie_data:
                        st.session_state.cgv_movie_data = cgv_movie_data

                        st.write('### ÏòÅÌôî Ï†ïÎ≥¥')
                        st.write(f'**Ï†úÎ™©:** {cgv_movie_data["Title"]}')
                        st.write(f'**Í∞êÎèÖ:** {cgv_movie_data["Directors"]}')
                        st.write(f'**Ï∂úÏó∞:** {cgv_movie_data["Cast"]}')
                        st.write(f'**Ï§ÑÍ±∞Î¶¨:** {cgv_movie_data["Plot"]}')

                        st.dataframe(cgv_movie_data["Reviews"])
                        st.session_state.cgv_reviews = cgv_movie_data["Reviews"]
                        st.session_state.show_cgv_sentiment = True
                    else:
                        st.warning("ÏòÅÌôî Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")

                    #     if st.button("Î¶¨Î∑∞ Ï†ÄÏû•", key="cgv_save"):
                    #         output_path = f'{movie_data["Title"]}_reviews.csv'
                    #         movie_data["Reviews"].to_csv(output_path, index=False)
                    #         st.success(f"Î¶¨Î∑∞Î•º {output_path}Ïóê Ï†ÄÏû•ÌñàÏäµÎãàÎã§.")
                    #         # Store reviews in session state
                    #         st.session_state.cgv_reviews = movie_data["Reviews"]
                    # else:
                    #     st.warning("ÏòÅÌôî Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                    #     return movie_data

        # Display sentiment analysis section if reviews exist or show_sentiment_analysis is True
        if st.session_state.cgv_reviews is not None and st.session_state.show_cgv_sentiment:
            st.markdown("### CGV Í∞êÏÑ± Î∂ÑÏÑù")
            if st.button("CGV Î¶¨Î∑∞ Í∞êÏÑ± Î∂ÑÏÑù", key="cgv_sentiment"):
                with st.spinner("Í∞êÏÑ± Î∂ÑÏÑù Ï§ë... Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî."):
                    st.session_state.cgv_reviews = analyze_sentiment(st.session_state.cgv_reviews)
                    st.success("Í∞êÏÑ± Î∂ÑÏÑù ÏôÑÎ£å!")
                    st.subheader("Í∞êÏÑ± Î∂ÑÏÑù Í≤∞Í≥º")
                    st.dataframe(st.session_state.cgv_reviews[["review", "sentiment", "confidence"]], use_container_width=True)


                    st.download_button(
                        "CGV Í∞êÏÑ± Î∂ÑÏÑù Í≤∞Í≥º Îã§Ïö¥Î°úÎìú",
                        st.session_state.cgv_reviews.to_csv(index=False).encode("utf-8"),
                        f"cgv_sentiment_results.csv",
                        "text/csv",
                        key="cgv_sentiment_download_button"
                    )

                    st.subheader("üìä ÏãúÍ∞ÅÌôî Í≤∞Í≥º")

                    fig = px.histogram(
                        st.session_state.cgv_reviews,
                        x="confidence",
                        color="sentiment",
                        title="Í∞êÏÑ± Ïã†Î¢∞ÎèÑ Î∂ÑÌè¨",
                        labels={"confidence": "Confidence", "sentiment": "Sentiment"},
                        color_discrete_map={"Í∏çÏ†ï": "#28A745", "Î∂ÄÏ†ï": "#FF073A"}
                    )
                    st.plotly_chart(fig, use_container_width=True)

                    # Add pie chart for sentiment distribution
                    sentiment_counts = st.session_state.cgv_reviews['sentiment'].value_counts()
                    fig_pie = px.pie(
                        values=sentiment_counts.values,
                        names=sentiment_counts.index,
                        title="Í∞êÏÑ± Î∂ÑÏÑù Î∂ÑÌè¨",
                        color=sentiment_counts.index,
                        color_discrete_map={"Í∏çÏ†ï": "#28A745", "Î∂ÄÏ†ï": "#FF073A"}
                    )
                    fig_pie.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig_pie, use_container_width=True)

                    st.subheader("üìã Î∂ÑÏÑù Í≤∞Í≥º")
                    gb = GridOptionsBuilder.from_dataframe(st.session_state.cgv_reviews[["review", "sentiment", "confidence"]])
                    gb.configure_pagination(paginationAutoPageSize=True)  # Enable pagination
                    gb.configure_default_column(
                        groupable=True,
                        value=True,
                        enableRowGroup=True,
                        editable=False,
                        filterable=True,
                    )
                    gb.configure_column("confidence", type=["numericColumn"], precision=2)
                    grid_options = gb.build()

                    AgGrid(
                        st.session_state.cgv_reviews[["review", "sentiment", "confidence"]],
                        gridOptions=grid_options,
                        height=300,
                        theme="balham",  # "light", "dark", "blue", "fresh", "material"
                        update_mode="MODEL_CHANGED",
                        fit_columns_on_grid_load=True,
                    )
            # Add prompt generation section after sentiment analysis
            st.markdown("### üé® ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±")
            if st.button("ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±", key="cgv_prompt_button"):
                if 'sentiment' not in st.session_state.cgv_reviews.columns:
                    st.warning("Î®ºÏ†Ä Í∞êÏÑ± Î∂ÑÏÑùÏùÑ Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî!")
                elif not hasattr(st.session_state, 'cgv_movie_data'):
                    st.warning("ÏòÅÌôî Ï†ïÎ≥¥Î•º Î®ºÏ†Ä Í∞ÄÏ†∏ÏôÄÏ£ºÏÑ∏Ïöî!")
                else:
                    with st.spinner("ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ± Ï§ë..."):
                        generated_prompt = generate_cgv_prompt(
                            st.session_state.cgv_reviews,
                            st.session_state.cgv_movie_data  # Use movie data from session state
                        )
                        if generated_prompt:
                            st.success("ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ± ÏôÑÎ£å!")
                            st.text_area("ÏÉùÏÑ±Îêú ÌîÑÎ°¨ÌîÑÌä∏:", value=generated_prompt, height=400)
                            
                            # Add copy button
                            st.download_button(
                                label="ÌîÑÎ°¨ÌîÑÌä∏ ÌÖçÏä§Ìä∏ ÌååÏùºÎ°ú Îã§Ïö¥Î°úÎìú",
                                data=generated_prompt,
                                file_name="movie_poster_prompt.txt",
                                mime="text/plain"
                            )








    st.markdown("---")
    st.header("üîç Megabox Î¶¨Î∑∞ ÌÅ¨Î°§ÎßÅ")
    with st.expander("Megabox Î¶¨Î∑∞ ÌÅ¨Î°§ÎßÅ", expanded=False):
        megabox_search_query = st.text_input("Í≤ÄÏÉâÌï† ÏòÅÌôî Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:", key="megabox_search_query")
        if st.button("Megabox Í≤ÄÏÉâ", key="megabox_movie_search"):
            if megabox_search_query:
                with st.spinner('Megabox Í≤ÄÏÉâÏ§ë...'):
                    megabox = MegaboxTitleCrawler()
                    megabox_movie_titles, megabox_movie_info = megabox.fetch_movie_titles(megabox_search_query)
                    if megabox_movie_titles:
                        st.session_state.megabox_movie_titles = megabox_movie_titles
                        st.session_state.megabox_movie_info = megabox_movie_info
                        st.session_state.selected_movie = megabox_movie_titles[0]    # ÏòÅÌôî Ï†úÎ™© ÏÑ†ÌÉù. [0]: Ï≤´Î≤àÏß∏ ÏòÅÌôî Ï†úÎ™©
                    else:
                        st.warning("MegaboxÏóêÏÑú ÏòÅÌôîÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
            else:
                st.warning("ÏòÅÌôî Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
    
        if st.session_state.megabox_movie_titles:
            st.session_state.megabox_selected_movie = st.selectbox(
                "Megabox Í≤ÄÏÉâ Í≤∞Í≥º:", 
                st.session_state.megabox_movie_titles,  # Access the session state variable
                key="megabox_movie_selectbox",  # Unique key for Megabox
                format_func=lambda x: f"{x}".replace("()", "")  # Remove parentheses
                # format_func=lambda x: f"{x} ({next((info.get('rating', 'N/A') for info in st.session_state.megabox_movie_info if info.get('title') == x), 'N/A')})"
            )
                # # 
                # format_func=lambda x: f"{x}".replace("()", "")  # Remove parentheses

        if st.session_state.get("megabox_selected_movie"):
            megabox_review_limit = st.number_input("ÌÅ¨Î°§ÎßÅÌï† Megabox Î¶¨Î∑∞ Ïàò", min_value=1, value=5, key="megabox_review_limit")
            if st.button("ÏòÅÌôî Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞", key="megabox_info_button"):
                with st.spinner("ÏòÅÌôî Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Îäî Ï§ë... Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî."):
                    megabox_detail = MegaboxDetailCrawler()
                    megabox_movie_data = megabox_detail.crawl_movie_details(st.session_state.selected_movie, 
                                                                    review_limit=megabox_review_limit)
                    if megabox_movie_data:
                        st.session_state.megabox_movie_data = megabox_movie_data

                        st.write('### ÏòÅÌôî Ï†ïÎ≥¥')
                        st.write(f'**Ï†úÎ™©:** {megabox_movie_data["Title"]}')
                        st.write(f'**Í∞êÎèÖ:** {megabox_movie_data["Directors"]}')
                        st.write(f'**Ï∂úÏó∞:** {megabox_movie_data.get("Casts", "Ï†ïÎ≥¥ ÏóÜÏùå")}')
                        st.write(f'**Ï§ÑÍ±∞Î¶¨:** {megabox_movie_data["Plot"]}')

                        st.dataframe(megabox_movie_data["Reviews"])
                        st.session_state.megabox_reviews = megabox_movie_data["Reviews"]
                        st.session_state.show_megabox_sentiment = True
                    else:
                        st.warning("ÏòÅÌôî Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                    #     if st.button("Î¶¨Î∑∞ Ï†ÄÏû•", key="megabox_save"):
                    #         output_path = f'{movie_data["Title"]}_reviews.csv'
                    #         movie_data["Reviews"].to_csv(output_path, index=False)
                    #         st.success(f"Î¶¨Î∑∞Î•º {output_path}Ïóê Ï†ÄÏû•ÌñàÏäµÎãàÎã§.")
                    #         # Store reviews in session state
                    #         st.session_state.megabox_reviews = movie_data["Reviews"]
                    #         # Show the sentiment analysis button immediately after saving
                    #         st.session_state.show_megabox_sentiment = True
                    # else:
                    #     st.warning("ÏòÅÌôî Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")


        # Display sentiment analysis section if reviews exist or show_megabox_sentiment is True
        if st.session_state.megabox_reviews is not None and st.session_state.show_megabox_sentiment:
            st.markdown("### Megabox Í∞êÏÑ± Î∂ÑÏÑù")
            if st.button("Megabox Î¶¨Î∑∞ Í∞êÏÑ± Î∂ÑÏÑù", key="megabox_sentiment"):
                with st.spinner("Í∞êÏÑ± Î∂ÑÏÑù Ï§ë... Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî."):
                    st.session_state.megabox_reviews = analyze_sentiment(st.session_state.megabox_reviews)
                    st.success("Í∞êÏÑ± Î∂ÑÏÑù ÏôÑÎ£å!")
                    st.subheader("Í∞êÏÑ± Î∂ÑÏÑù Í≤∞Í≥º")
                    
                    # Create DataFrame for display and download
                    st.dataframe(st.session_state.megabox_reviews[["review", "sentiment", "confidence"]])


                    # Download button
                    st.download_button(
                        "Megabox Í∞êÏÑ± Î∂ÑÏÑù Í≤∞Í≥º Îã§Ïö¥Î°úÎìú",
                        st.session_state.megabox_reviews.to_csv(index=False).encode("utf-8"),
                        f"megabox_sentiment_results.csv",
                        "text/csv",
                        key="megabox_sentiment_download_button"
                    )

                    # Visualizations
                    st.subheader("üìä ÏãúÍ∞ÅÌôî Í≤∞Í≥º")
                    
                    # Histogram
                    fig_hist = px.histogram(
                        st.session_state.megabox_reviews,
                        x="confidence",
                        color="sentiment",
                        title="Í∞êÏÑ± Ïã†Î¢∞ÎèÑ Î∂ÑÌè¨",
                        labels={"confidence": "Confidence", "sentiment": "Sentiment"},
                        color_discrete_map={"Í∏çÏ†ï": "#28A745", "Î∂ÄÏ†ï": "#FF073A"}
                    )
                    st.plotly_chart(fig_hist, use_container_width=True)

                    # Pie chart
                    sentiment_counts = st.session_state.megabox_reviews['sentiment'].value_counts()
                    fig_pie = px.pie(
                        values=sentiment_counts.values,
                        names=sentiment_counts.index,
                        title="Í∞êÏÑ± Î∂ÑÏÑù Î∂ÑÌè¨",
                        color=sentiment_counts.index,
                        color_discrete_map={"Í∏çÏ†ï": "#28A745", "Î∂ÄÏ†ï": "#FF073A"}
                    )
                    fig_pie.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig_pie, use_container_width=True)

                    # Data grid
                    st.subheader("üìã ÏÉÅÏÑ∏ Î∂ÑÏÑù Í≤∞Í≥º")
                    gb = GridOptionsBuilder.from_dataframe(st.session_state.megabox_reviews)
                    gb.configure_pagination(paginationAutoPageSize=True)
                    gb.configure_default_column(
                        groupable=True,
                        value=True,
                        enableRowGroup=True,
                        editable=False,
                        filterable=True,
                    )
                    gb.configure_column("confidence", type=["numericColumn"], precision=2)
                    grid_options = gb.build()

                    AgGrid(
                        st.session_state.megabox_reviews,
                        gridOptions=grid_options,
                        height=300,
                        theme="balham",
                        update_mode="MODEL_CHANGED",
                        fit_columns_on_grid_load=True,
                    )

            st.markdown("### üé® ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±")
            if st.button("ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±", key="megabox_prompt_button"):
                if 'sentiment' not in st.session_state.megabox_reviews.columns:
                    st.warning("Î®ºÏ†Ä Í∞êÏÑ± Î∂ÑÏÑùÏùÑ Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî!")
                elif not hasattr(st.session_state, 'megabox_movie_data'):
                    st.warning("ÏòÅÌôî Ï†ïÎ≥¥Î•º Î®ºÏ†Ä Í∞ÄÏ†∏ÏôÄÏ£ºÏÑ∏Ïöî!")
                else:
                    with st.spinner("ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ± Ï§ë..."):
                        generated_prompt = generate_cgv_prompt(
                            st.session_state.megabox_reviews,
                            st.session_state.megabox_movie_data  # Use movie data from session state
                        )
                        if generated_prompt:
                            st.success("ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ± ÏôÑÎ£å!")
                            st.text_area("ÏÉùÏÑ±Îêú ÌîÑÎ°¨ÌîÑÌä∏:", value=generated_prompt, height=400)
                            
                            # Add copy button
                            st.download_button(
                                label="ÌîÑÎ°¨ÌîÑÌä∏ ÌÖçÏä§Ìä∏ ÌååÏùºÎ°ú Îã§Ïö¥Î°úÎìú",
                                data=generated_prompt,
                                file_name="movie_poster_prompt.txt",
                                mime="text/plain"
                            )



if __name__ == "__main__":
    streamlit_movie_search()